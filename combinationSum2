class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> resList = new ArrayList<>();
        Arrays.sort(candidates);
        dfs(candidates, target, 0, 0, new ArrayList<>(), resList);
        return resList;
    }
    
     private void dfs(int[] nums, int target, int sum, int index, List<Integer> list, List<List<Integer>> resList){
        if(sum > target){
            return;
        }
         
        if(sum == target){
            resList.add(new ArrayList<>(list));
            return;
        }
         
         if(index == nums.length){
             return;
         }
        
        for(int i = index; i < nums.length; i++){
            if(i > index && nums[i] == nums[i - 1]){
                continue;
            }
            list.add(nums[i]);
            dfs(nums, target, sum + nums[i], i + 1, list, resList);
            list.remove(list.size() - 1);
        }
    }
}

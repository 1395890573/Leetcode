class Solution {
    public int snakesAndLadders(int[][] board) {
        Queue<Integer> queue = new LinkedList<>();
        int len = board.length;
        boolean[] visit =new boolean[len * len + 1];
        queue.offer(1);
        visit[1] = true;
        int step = 0; 
        int res = Integer.MAX_VALUE;
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int j = 0; j < size; j++){
                int num = queue.poll();
                if(num == len * len){
                   return step;
                }
                
                for(int i = 1; i <= 6; i++){
                     if(num + i <= len * len && !visit[num + i]){
                        int[] tmp = transform(len - 1, num + i);
                        visit[num+i] = true;
                        
                        if(board[tmp[0]][tmp[1]] == -1){
                            queue.offer(num + i);   
                        }else if(!visit[board[tmp[0]][tmp[1]]]){    
                            queue.offer(board[tmp[0]][tmp[1]]);
                        } 
                     } 
                }  
               
            }
            step++;
        }
        return -1;
    }
    
    private int[] transform(int N, int num){
        int x = N - (num - 1) / (N + 1);
        int y = 0;
        if(x % 2 == N % 2){
            y = (num - 1) % (N + 1);
        }else{
            y = N - (num - 1) % (N + 1);
        }
        return new int[]{x, y};
    }
    
}

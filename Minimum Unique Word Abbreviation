class Solution {
    TrieNode root;
    public String minAbbreviation(String target, String[] dictionary) {
        List<String> abbrs = new ArrayList<>();
        root = new TrieNode();
        generateAbbr(target, abbrs, 0, 0, "");
        Collections.sort(abbrs, (a, b) -> (a.length() - b.length()));
        for(String word : dictionary){
            addTrieNode(word);
        }
        
        int min = Integer.MAX_VALUE;
        String res = "";
        for(String str : abbrs){
            // System.out.println(str);
            if(search(root, str, 0, 0) == false){
                int numOfCh = 0;
                for(int i = 0; i < str.length(); i++){
                    if(!Character.isDigit(str.charAt(i))){
                        numOfCh++;
                    }
                }
                if(numOfCh < min){
                    min = numOfCh;
                    res = str;
                }
            }
        }
        
        return res;
    }
    
    private void addTrieNode(String s){
        TrieNode cur = root;
        for(int i=0; i < s.length(); i++) {
            char c = s.charAt(i);
            if(cur.children[c-'a']==null) {
                cur.children[c-'a']=new TrieNode();
            }
            cur = cur.children[c-'a'];
        }
        cur.isWord = true;
    }
    
    private boolean search(TrieNode cur, String p, int index, int num){
       
        if(cur == null){
            return false;
        }
        
        
        if(num > 0){
            for(int i = 0; i < 26; i++){
                if(search(cur.children[i], p, index, num - 1)){
                    return true;
                }
            }
            return false;
        }
        
        if(index == p.length()){
            return cur.isWord;
        }
            
        if(Character.isDigit(p.charAt(index))){
            int numOfChar = 0;
            while(index < p.length() && Character.isDigit(p.charAt(index))){
                numOfChar = numOfChar * 10 + (p.charAt(index) - '0');
                index++;
            }
            return search(cur, p, index, numOfChar);
        }else{
            return search(cur.children[p.charAt(index) - 'a'], p, index + 1, 0);
        }
    }
    
    
    
    class TrieNode{
        TrieNode[] children;
        boolean isWord;
        
        public TrieNode(){
            children = new TrieNode[26];
        }
    }
    
    private void generateAbbr(String target, List<String> list, int index, int num, String path){
      
        if(index == target.length()){
              
            if(num != 0){
                path = path + num;
            }
            list.add(path);
            return;
        }
        
        generateAbbr(target, list, index + 1, 0, path + (num == 0 ? "" : num) + target.charAt(index));
        generateAbbr(target, list, index + 1, num + 1, path);
    }
}

class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> resList = new ArrayList<>();
        generateParenthesisDFS(new StringBuilder(), resList, 0,0, n);
        return resList;
    }
    
    private void generateParenthesisDFS(StringBuilder sb, List<String> resList, int open, int close, int n){
        if(sb.length() == 2 * n){
            if(open == n && close == n){
                resList.add(sb.toString());
            }
            return;
        }
        
        if(close > open || open > n){
            return;
        }
        
        int len = sb.length();
        sb.append("(");
        generateParenthesisDFS(sb, resList, open + 1,close, n);
        sb.deleteCharAt(len);
        
        sb.append(")");
        generateParenthesisDFS(sb, resList, open, close + 1, n);
        sb.deleteCharAt(len);
    }
}

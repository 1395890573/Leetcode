class Solution {

    int[][] directions = new int[][] {{1,0}, {-1, 0}, {0, 1}, {0, -1}};
    
    public List<String> findWords(char[][] board, String[] words) {
        List<String> resList = new ArrayList<>();
        if(words.length == 0){
            return resList;
        }
        
        TrieNode head = buildTrie(words);
        Set<String> set = new HashSet<>();
        boolean[][] visited = new boolean[board.length][board[0].length];
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                dfs(board, visited, i, j, set, head);
            }
        }
        System.out.println(set.size());
        for(String str : set){
            resList.add(str);
        }
        
        return resList;   
    }
    
    private void dfs(char[][] board, boolean[][] visited, int x, int y, Set<String> resSet, TrieNode pointer){
        if(x < 0 || y < 0 || x >= board.length || y >= board[0].length || visited[x][y] || pointer.children[board[x][y] - 'a'] == null){
            return;
        }
        // System.out.println(pointer.children[board[x][y] - 'a'].word);
        
        if(pointer.children[board[x][y] - 'a'].isWord){
            resSet.add(pointer.children[board[x][y] - 'a'].word);
        }
        
        visited[x][y] = true;
        
        for(int[] direction : directions){
            int nextx = x + direction[0];
            int nexty = y + direction[1];
            // move forward the pointer
            // special case: head
            dfs(board, visited, nextx, nexty, resSet, pointer.children[board[x][y] - 'a']);
        }   
        
         visited[x][y] = false;
    }
    
    private TrieNode buildTrie(String[] words){
        TrieNode root = new TrieNode();
        for(String word : words){
            TrieNode p = root;
            for(int i = 0; i < word.length(); i++){
                char c = word.charAt(i);
                if(p.children[c - 'a'] == null){
                    p.children[c - 'a'] = new TrieNode();
                }
                p = p.children[c - 'a'];
            }
            p.isWord = true;
            p.word = word;
        }
        return root;
    }
    
    class TrieNode{
        TrieNode[] children;
        boolean isWord;
        String word;
        public TrieNode(){
            children = new TrieNode[26];
            isWord = false;
        }
    }
}

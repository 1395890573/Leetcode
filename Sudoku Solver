class Solution {
    Map<Integer, Set<Integer>> rowMap;
    Map<Integer, Set<Integer>> colMap;
    Map<Integer, Set<Integer>> boxMap;
    public void solveSudoku(char[][] board) {
        rowMap = new HashMap<>();
        colMap = new HashMap<>();
        boxMap = new HashMap<>();
        for(int i = 0; i < 9; i++){
            rowMap.put(i, new HashSet<>());
            colMap.put(i, new HashSet<>());
            boxMap.put(i, new HashSet<>());
        }
        
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                if(board[i][j] == '.'){
                    continue;
                }
                rowMap.get(i).add(board[i][j] - '0');
                colMap.get(j).add(board[i][j] - '0');
                boxMap.get((i / 3) * 3 + j / 3).add(board[i][j] - '0');
                
            }
        }
            
        solve(board, 0, 0);
        
    }
    
    private boolean solve(char[][] board, int i, int j){
        // System.out.println(i + " " + j);
        if(i == 9 && j == 0){
            return true;
        }
        int nexty = j + 1;
        int nextx = i;
        if(nexty == 9){
            nextx++;
            nexty = 0;
        }
        
        if(board[i][j] == '.'){
            for(char k = '1'; k <= '9'; k++){
                if(check(board, i, j, k)){
                    board[i][j] = k;
                    rowMap.get(i).add(k - '0');
                    colMap.get(j).add(k - '0');
                    boxMap.get((i / 3) * 3 + j / 3).add(k - '0');
                    if(solve(board, nextx, nexty)){
                        return true;
                    }
                     board[i][j] = '.';
                    rowMap.get(i).remove(k - '0');
                    colMap.get(j).remove(k - '0');
                    boxMap.get((i / 3) * 3 + j / 3).remove(k - '0');
                }
            }
        }else{
            return solve(board, nextx, nexty);
        }
        
        return false;
    }
    
    private boolean check(char[][] board, int row, int col, char c){
        int num = c - '0';
        if(rowMap.get(row).contains(num)){
            return false;
        }
        
        if(colMap.get(col).contains(num)){
            return false;
        }
        
        
        if(boxMap.get((row / 3) * 3 + col / 3).contains(num)){
            return false;
        }
        return true;
    }
}

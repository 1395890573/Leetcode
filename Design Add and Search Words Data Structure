class WordDictionary {
    TrieNode root;

    /** Initialize your data structure here. */
    public WordDictionary() {
        root = new TrieNode();
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        TrieNode cur = root;
        for(int i = 0; i < word.length(); i++){
            char c = word.charAt(i);
            if(cur.children[c - 'a'] == null){
                cur.children[c - 'a'] = new TrieNode(); 
            }
            cur = cur.children[c - 'a'];
        }
        cur.word = word;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
        return searchDFS(word, root, 0);
    }
    
    private boolean searchDFS(String word, TrieNode cur, int index){
        if(index == word.length()){
            if(cur.word != null){
                return true;
            }
            return false;
        }
        
        char ch = word.charAt(index);
        if(ch == '.'){
            for(int i = 0; i < 26; i++){
                if(cur.children[i] != null && searchDFS(word, cur.children[i], index + 1)){
                    return true;
                }
            } 
            return false;
        }
        
        if(cur.children[ch - 'a'] == null){
            return false;
        }
        
        return searchDFS(word, cur.children[ch - 'a'], index + 1); 
    }
    
    class TrieNode{
        TrieNode[] children;
        String word;
        public TrieNode(){
            children = new TrieNode[26];
        }
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */

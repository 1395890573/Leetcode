class Solution {
    public int minimumJumps(int[] forbidden, int a, int b, int x) {
        Queue<int[]> queue = new LinkedList<>();
       Set<Integer> set = new HashSet<>();
        int maxLimit = 2000 + 2 * b;
        for(Integer num : forbidden){
            set.add(num);
             maxLimit = Math.max(maxLimit, num + 2 * b);
        }
        Set<String> seen = new HashSet<>();
        queue.offer(new int[] {0, 0});
        seen.add(0 + "" + 0);
        int step = 0;
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i = 0; i < size; i++){
                int[] cur = queue.poll();
               
                if(cur[0] == x){
                     // System.out.println(cur);
                    return step;
                }
                int next = cur[0] + a;
                if(next < maxLimit&& !set.contains(next) && !seen.contains(next + "" + 0)){
                    queue.offer(new int[]{next, 0});
                    seen.add(next + "" + 0);
                }
            
                next = cur[0] - b;
                if(next >= 0 && !set.contains(next) && !seen.contains(next + "" + 1) && cur[1] != 1){
                    queue.offer(new int[]{next, 1});
                    seen.add(next + "" + 1);
                }
            
            }
            step++;
        }
        
        return -1;
        
        
    }
}

class Solution {
    public List<String> watchedVideosByFriends(List<List<String>> watchedVideos, int[][] friends, int id, int level) {
        
        Queue<Integer> queue = new LinkedList<>();
        Set<Integer> visited = new HashSet<>();
        queue.offer(id);
        int curLevel = 0;
        visited.add(id);
        
        while(!queue.isEmpty() && curLevel < level){
            int size = queue.size();
            for(int i = 0; i < size; i++){
                int curId = queue.poll();
                for(Integer friend : friends[curId]){
                    if(visited.contains(friend)){
                        continue;
                    }
                    visited.add(friend);
                    queue.offer(friend);
                }
            }
            curLevel++;
        }
        
        Map<String, Integer> freq = new HashMap<>();
        for(Integer person : queue){
            for(String video : watchedVideos.get(person)){
                freq.put(video, freq.getOrDefault(video, 0) + 1);
            }
        }
        
        // System.out.println(freq);
        
        List<String> resList = new ArrayList<>(freq.keySet());
        Collections.sort(resList, (a, b) -> (
         freq.get(a) == freq.get(b) ? a.compareTo(b) : freq.get(a) - freq.get(b)
        ));
        
        return resList;
        
        
    }
}

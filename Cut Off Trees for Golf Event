class Solution {
    int[][] dirs = {{1, 0}, {-1 ,0}, {0, -1}, {0, 1}};
    public int cutOffTree(List<List<Integer>> forest) {
        List<int[]> trees = new ArrayList<>();
        for(int i = 0; i < forest.size(); i++){
            for(int j = 0; j < forest.get(0).size();j++){
                if(forest.get(i).get(j) > 1){
                    int[] tree = new int[3];
                    tree[2] = forest.get(i).get(j);
                    tree[0] = i;
                    tree[1] = j;
                    trees.add(tree);
                }
            }
        }
        
        Collections.sort(trees, (a, b) -> (a[2] - b[2]));
        int sr = 0, sc = 0, res = 0;
        for(int[] tree : trees){
            System.out.println(tree[2]);
            int step = minStep(forest, sr, sc, tree[0], tree[1]);
            if(step < 0) return -1;
            res += step;
            sr = tree[0];
            sc = tree[1];
        }
        
        return res;
    }
    
    private int minStep(List<List<Integer>> forest, int sr, int sc, int tr, int tc){
        int m = forest.size();
        int n = forest.get(0).size();
        boolean[][] visit = new boolean[m][n];
        Queue<int[]> q = new LinkedList<>();
        visit[sr][sc] = true;
        q.offer(new int[] {sr, sc});
        int step = 0;
        
        while(!q.isEmpty()){
            int size = q.size();
            for(int i = 0; i < size; i++){
                int[] cur = q.poll();
                if(cur[0] == tr && cur[1] == tc){
                    return step;
                }
                for(int[] dir : dirs){
                    int nr = dir[0] + cur[0];
                    int nc = dir[1] + cur[1];
                    if(nr < 0 || nr >= m || nc < 0 || nc >= n || visit[nr][nc] || forest.get(nr).get(nc) == 0) continue;
                    q.offer(new int[] { nr, nc});
                    visit[nr][nc] = true;
                }
            }
            step++;
        }
        
        return -1;
    }
}

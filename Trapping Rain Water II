class Solution {
    int[][] dirs = new int[][]{{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
    public int trapRainWater(int[][] heightMap) {
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> (heightMap[a[0]][a[1]] - heightMap[b[0]][b[1]]));
        int m = heightMap.length;
        int n = heightMap[0].length;
        boolean[][] visited = new boolean[m][n];
        
        for(int i = 0; i < heightMap.length; i++){
            pq.offer(new int[] {i, 0});
            pq.offer(new int[] {i, n - 1});
            visited[i][0] = true;
            visited[i][n - 1] = true;
            
        }
        
        for(int j = 0; j < n; j++){
            pq.offer(new int[] {0, j});
            pq.offer(new int[] {m - 1, j});
            visited[0][j] = true;
            visited[m - 1][j] = true;
        }
        
        int res = 0;
        
        
        while(!pq.isEmpty()){
            int[] cur = pq.poll();
            for(int[] dir : dirs){
                int nextx = dir[0] + cur[0];
                int nexty = dir[1] + cur[1];
                if(nextx < 0 || nexty < 0 || nextx >= m || nexty >= n || visited[nextx][nexty]){
                    continue;
                }
                
                visited[nextx][nexty] = true;
                if(heightMap[cur[0]][cur[1]] > heightMap[nextx][nexty]){
                    res +=  heightMap[cur[0]][cur[1]] - heightMap[nextx][nexty] ;
                }
                heightMap[nextx][nexty] = Math.max(heightMap[cur[0]][cur[1]], heightMap[nextx][nexty]);
                pq.offer(new int[] {nextx, nexty});
                
            }
        }
        
        return res;
        
        
    }
}

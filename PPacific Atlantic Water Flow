class Solution {
    int[][] dirs = new int[][] {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    public List<List<Integer>> pacificAtlantic(int[][] matrix) {
        if(matrix.length == 0 || matrix[0].length == 0){
            return new ArrayList<>();
        }
        
        int m = matrix.length;
        int n = matrix[0].length;
        boolean[][] pacific = new boolean[m][n];
        boolean[][] atlantic = new boolean[m][n];
        
        for(int i = 0; i < m; i++){
            dfs(matrix, i, -1, pacific, Integer.MIN_VALUE);
            dfs(matrix, i, n, atlantic, Integer.MIN_VALUE);
        }
        
         for(int i = 0; i < n; i++){
            dfs(matrix, -1,i, pacific, Integer.MIN_VALUE);
            dfs(matrix, m,i, atlantic, Integer.MIN_VALUE);
        }
        
        List<List<Integer>> resList = new ArrayList<>();
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                // System.out.print(pacific[i][j] + " ");
                if(pacific[i][j] && atlantic[i][j]){
                    List<Integer> list = new ArrayList<>();
                    list.add(i);
                    list.add(j);
                    resList.add(list);
                }
            }
        }
        
        return resList;   
    }
    
    
    private void dfs(int[][] matrix, int i, int j, boolean[][] visited, int height){
        for(int[] dir : dirs){
            int nextx = i + dir[0];
            int nexty = j + dir[1];
            
            if(nextx < 0 || nexty < 0 || nextx >= matrix.length || nexty >= matrix[0].length || matrix[nextx][nexty] < height || visited[nextx][nexty]){
                continue;
            }
            visited[nextx][nexty] = true;
            dfs(matrix, nextx, nexty, visited, matrix[nextx][nexty]);
            
        }
    }
}
